<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>TREE NEW BEE [听F.T树新风]</title>
    <link>http://treenewbee.info</link>
    <pubDate>12 May 15 16:34 CST</pubDate>
    <item>
      <title>程序运行的秘密[译]</title>
      <link>http://treenewbee.info/cs/%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A7%98%E5%AF%86%5B%E8%AF%91%5D/</link>
      <pubDate>2015-04-27 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;内存管理是操作系统的核心；理解它对编程和系统管理都至关重要。在接下来的几篇文章中，我将从实际应用的视角来阐述内存相关的知识点，但也不会回避其内部实现原理。因为概念是通用的，所以大部分例子都是基于32位x86体系的Linux和Windows。第一篇文章描述了运行中的程序在内存中是什么样子的。&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;在多任务操作系统中，每个进程都运行在自己独享的内存沙箱中。这个沙箱就是 &lt;strong&gt;虚拟地址空间&lt;/strong&gt; ，32位模式下就是一个 &lt;strong&gt;4GB的内存地址块&lt;/strong&gt; 。这些虚拟地址通过 &lt;strong&gt;页表&lt;/strong&gt; （ &lt;em&gt;原文：page tables&lt;/em&gt; ）映射到物理内存，页表由内核维护，被处理器查阅。每个进程都有属于自己的页表，但这儿有一个陷阱（ &lt;em&gt;译者：不太理解这句什么意思&lt;/em&gt; ）。一旦启用了虚拟地址，机器中的所有软件、 &lt;em&gt;包括内核本身&lt;/em&gt; ，都会使用虚拟地址。因此，一部分虚拟地址空间一定是保留给内核使用的：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/kernelUserMemorySplit.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;这 &lt;strong&gt;并不是说&lt;/strong&gt; 内核使用那么多的物理内存，这仅仅表示内核可以用这部分地址空间来映射他需要的任何物理内存。内核地址空间在页表中用&lt;a target=_blank href=&#34;http://duartes.org/gustavo/blog/post/cpu-rings-privilege-and-protection/&#34;&gt;权限码&lt;/a&gt;标记为独享的（小于等于权限码2），因此，如果用户态程序尝试访问，会触发一个页错误（ &lt;em&gt;原文：page fault&lt;/em&gt; ）。Linux的内核空间是常驻的，并且在所有进程当中都映射到相同的物理内存。内核代码和数据总是可以寻址的，随时准备处理中断或系统调用。然而，当进程切换的时候，用户态地址空间部分的映射是随之改变的。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/linuxClassicAddressSpaceLayout.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;蓝色区域表示已经映射到物理内存的虚拟地址，白色部分表示还未映射。在上图的例子中，众所周知，Firefox是个吃内存的大户，它占用了多得多的内存。地址空间中不同的条状相当于 &lt;strong&gt;内存段&lt;/strong&gt; （ &lt;em&gt;原文：memory segments&lt;/em&gt; ），比如堆，栈，等等。记住，这些段是简单的内存地址区间，它和&lt;a target=_blank href=&#34;http://duartes.org/gustavo/blog/post/memory-translation-and-segmentation&#34;&gt;Intel段表机制&lt;/a&gt; &lt;em&gt;毫无关系&lt;/em&gt; 。如下是Linux进程中标准的段布局：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/linuxFlexibleAddressSpaceLayout.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;此时计算机运转得愉快，如上所示，机器中几乎所有进程的各个段的起始虚拟地址 &lt;strong&gt;完全相同&lt;/strong&gt; ，这带来了易受远程攻击的安全隐患。攻击者往往需要引用绝对内存地址：栈地址，库函数地址，等等。基于各个段的起始虚拟地址完全一致这个事实，远程攻击者们一定会不假思索地选择这些位置下手。他们真这样干了之后，人们傻眼了。因此，随机地址空间越来越流行。Linux会对&lt;a target=&#34;_blank&#34; href=&#34;http://lxr.linux.no/linux+v2.6.28.1/fs/binfmt_elf.c#L542&#34;&gt;栈&lt;/a&gt;，&lt;a target=&#34;_blank&#34; href=&#34;http://lxr.linux.no/linux+v2.6.28.1/arch/x86/mm/mmap.c#L84&#34;&gt;memory mapping段&lt;/a&gt;，以及对&lt;a target=&#34;_blank&#34; href=&#34;http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/process_32.c#L729&#34;&gt;堆&lt;/a&gt;的起始地址设置随机偏移量。不幸的是，32位地址空间是如此吃紧，以至于几乎留不了太多空间来随机化起始地址和效率，并&lt;a target=&#34;_blank&#34; href=&#34;http://www.stanford.edu/~blp/papers/asrandom.pdf&#34;&gt;降低了效率&lt;/a&gt;（ &lt;em&gt;原文：hampering its effectiveness&lt;/em&gt; ）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;进程地址空间顶部的段是栈，在大部分编程语言中，它用来存储局部变量和函数参数。调用一个方法或函数会在栈中压入一个新栈帧。当函数返回的时候栈帧会被销毁。如此简单的设计，大概是源自于数据都遵守严格的&lt;a target=_blank href=&#34;http://en.wikipedia.org/wiki/Lifo&#34;&gt;后进先出（ &lt;em&gt;原文：LIFO&lt;/em&gt; ）&lt;/a&gt;顺序吧，简单来说，就是无需复杂的数据结构来跟踪栈的数据——一个简单的指针指向栈顶即可。因此，压栈和弹栈的操作效率又高又明确。而且，经常的重复使用栈区域会把活跃的内存放到&lt;a target=_blank href=&#34;http://duartes.org/gustavo/blog/post/intel-cpu-caches&#34;&gt;cpu caches&lt;/a&gt;中，加速访问。进程中每一个线程都拥有自己的栈。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;数据压栈越来越多，可能会把栈空间耗尽，这时候会出发一个页错误，Linux环境下会调用&lt;a target=_blank href=&#34;http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1716&#34;&gt;expand_stack()&lt;/a&gt;来处理，它会继续调用&lt;a target=_blank href=&#34;http://lxr.linux.no/linux+v2.6.28/mm/mmap.c#L1544&#34;&gt;acct_stack_growth()&lt;/a&gt;来检查判断是否适合来扩展栈空间。如果栈的大小小于RLIMIT_STACK（通常是8MB），通常会增加栈空间，程序会愉快的继续执行，对这一切并无感知。这是一个正常机制，使得栈大小能根据需求来调整。然后，如果达到了栈大小的最大值，会产生 &lt;strong&gt;栈溢出&lt;/strong&gt; 且程序会收到段错误。当映射的栈区域扩大以满足需求，当栈变小时，它不会再缩回来。很像联邦预算是不？丫只会扩充不会缩减。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;上面描述的动态栈空间增长，是访问未映射内存区域的 &lt;strong&gt;唯一场景&lt;/strong&gt;，如上图白色部分，这是合法的。除此之外，任何访问未映射内存区域都会触发页错误，这会产生一个段错误。一些已映射的区域是只读的，因此，对这些区域的写操作也会导致段错误。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在栈的下面，是内存映射区域（ &lt;em&gt;原文：memory mapping segment&lt;/em&gt; ）。这里，内核直接把文件内容映射到内存。任何应用都可以通过Linux的&lt;a target=_blank href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man2/mmap.2.html&#34;&gt;mmap()&lt;/a&gt;系统调用（&lt;a target=_blank href=&#34;http://lxr.linux.no/linux+v2.6.28.1/arch/x86/kernel/sys_i386_32.c#L27&#34;&gt;实现&lt;/a&gt;）来申请这样一个映射（Windows中，可以用&lt;a target=_blank href=&#34;http://msdn.microsoft.com/en-us/library/aa366537(VS.85).aspx&#34;&gt;CreateFileMapping()&lt;/a&gt; / &lt;a target=_blank href=&#34;http://msdn.microsoft.com/en-us/library/aa366761(VS.85).aspx&#34;&gt;MapViewOfFile()&lt;/a&gt;）。内存映射是一种方便并且高效的使用文件I/O的方式，因此它被用来加载动态库。我们也可以创建一个 &lt;strong&gt;匿名内存映射&lt;/strong&gt;（ &lt;em&gt;原文：anonymous memory mapping&lt;/em&gt; ），匿名内存映射不对应任何文件，用来代替程序数据。在Linux下，如果你通过&lt;a target=_blank href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html&#34;&gt;malloc()&lt;/a&gt;请求一块大内存，C库会创建这样一个匿名映射来代替使用堆的内存。“大”的意思指的是大于 &lt;strong&gt;MMAP_THRESHOLD&lt;/strong&gt; 字节，默认128k，可以通过&lt;a target=_blank href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man3/undocumented.3.html&#34;&gt;mallopt()&lt;/a&gt;调整。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;上文提到了堆，堆用来在运行时进行内存分配，这一点很像栈；堆中数据的生命周期可以比给这些数据分配内存空间的函数的生命周期要长，这点和栈不同。大部分语言都为程序提供了堆的管理机制。满足内存请求是一件需要语言运行时以及内核联合协作的事情。对于C语言来说，堆分配的接口是&lt;a target=_blank href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man3/malloc.3.html&#34;&gt;malloc()&lt;/a&gt;及其相关函数，而在一些提供了垃圾回收机制的语言比如C#中，函数的名字会有所差别。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;如果堆中有足够的空间来满足内存请求，语言运行时环境即可处理，不需要内核的参与。否则，堆需要通过&lt;a target=_blank href=&#34;http://www.kernel.org/doc/man-pages/online/pages/man2/brk.2.html&#34;&gt;brk()&lt;/a&gt;这个系统调用来扩大空间。堆管理是&lt;a target=_blank href=&#34;http://g.oswego.edu/dl/html/malloc.html&#34;&gt;复杂的&lt;/a&gt;，需要精确的算法来应对程序乱七八糟的分配模式，从而争取更多的速度和内存使用效率。服务一个堆请求是有可能会非常耗时的。实时操作系统有一个&lt;a target=_blank href=&#34;http://rtportal.upv.es/rtmalloc/&#34;&gt;专用分配器&lt;/a&gt;来处理这个问题。堆也可能变得片段化，如下图所示：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;最后，让我们看一下最靠下的段：BSS，data，text。BSS和data都是用来存储C语言中的静态或全局变量。它们之间的区别是BSS存储未初始化的变量，它们的值在程序当中没有被设置。BSS的内存区域是匿名的，它不映射到任何文件。如果你声明一个 &lt;em&gt;static int cntActiveUsers&lt;/em&gt; ，它的值就存储在BSS中。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/fragmentedHeap.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;data段，从另一方面来讲，存储那些在程序中初始化过的静态/全局变量。这段内存不是匿名的。它映射到程序二进制源文件中的初始化静态/全局变量部分。如果你在源代码中写 &lt;em&gt;static int cntWorkerBees = 10&lt;/em&gt; ， &lt;em&gt;cntWorkerBees&lt;/em&gt; 的值就存在data段中，开始的值为10。尽管data段映射到文件，但它属于私有 &lt;strong&gt;内存映射(private memory mapping)&lt;/strong&gt; ，对这块儿内存区域的更新不会修改文件。这是一定的，否则对全局变量的赋值会改变磁盘上的二进制源文件，那就太不可思议太荒唐了！&lt;/p&gt;&#xA;&#xA;&lt;p&gt;图示比较复杂，因为它有一个指针。这个例子中， &lt;em&gt;gonzo&lt;/em&gt; 这个指针——一个四字节的内存地址，存储在data段中，而它所指的字符串却不是。这个字符串存储在代码段中。代码段是只读的，存储了所有的源代码以及一些常量字符串等。text段也映射到二进制源文件，但如果对text进行写操作会导致段错误。这会防止一些指针bugs，但显然不如在C代码中提前规避来得高效。下图是示例：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/mappingBinaryImage.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在Linux下，你可以通过文件 &lt;em&gt;/proc/pid_of_process/maps&lt;/em&gt; 来查看进程的各个内存区域。 记住，一个段可能包含很多区域。比如，在mmap段中，每个映射到内存的文件通常都有它自己的内存区域，动态库还拥有额外的内存区域就像BSS和data一样。在下一篇文章中，我们会彻底搞清楚“区域”到底是什么意思。而且，有时候人们说“数据段”的意思是data + bss + heap。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;你可以通过nm和objdump命令来查看二进制源文件把符号、地址、段等等信息打印出来。最后，上面所描述的虚拟地址的管理设计在Linux里是很“灵活”的，它已被Linux作为首选机制好多年了，它假设RLIMIT_STACK变量是有值的，如果没有，那么Linux则退回到“传统”方式管理内存，如下图所示：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;/assets/media/2015-04-23-内存中运行的程序之剖析[译]/virtualMemoryInProcessSwitch.png&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;上图就是虚拟内存空间的设计。下一篇文章会讨论内核如何跟踪这些内存区域。进而我们会看看内存映射原理，相关联的文件如何读写，及内存使用情况图表的含义。&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文： &lt;em&gt;&lt;a target=_blank href=&#34;http://duartes.org/gustavo/blog/post/anatomy-of-a-program-in-memory/&#34;&gt;Anatomy of a Program in Memory&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/blockquote&gt;&#xA;</description>
    </item>
  </channel>
</rss>